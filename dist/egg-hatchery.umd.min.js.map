{"version":3,"file":"egg-hatchery.umd.min.js","sources":["../src/breedEgg.js","../src/newTools.js","../src/normalizeEggs.js","../src/index.js"],"sourcesContent":["const { defineProperty } = Object;\n\nexport default tools => {\n  const { tool } = tools;\n\n  const breeds = Object.create(null);\n  const frozenBreeds = Object.freeze(Object.create(breeds));\n  const factories = Object.create(null);\n\n  function validateBreedContext() {\n    if (tools.isHatched)\n      throw new Error('breed a hatching breed fails when hatch is finished');\n  }\n\n  function validateBreedName(name) {\n    if (!name || typeof name !== 'string')\n      throw new Error(\n        `invalid breed name, expected the first argument to be a non-empty string but received \"${name}\"`\n      );\n  }\n\n  function validateBreedFactory(factory) {\n    if (typeof factory !== 'function')\n      throw new Error(\n        `invalid breed function, expected the second argument to be a function but received \"${factory}\"`\n      );\n  }\n\n  function breed(name, factory) {\n    validateBreedContext();\n    validateBreedName(name);\n    validateBreedFactory(factory);\n\n    const uberFactory = factories[name];\n    const localBreeds = Object.create(breeds);\n    defineProperty(localBreeds, name, { get: uberFactory });\n    Object.freeze(localBreeds);\n\n    let isComputed = false;\n    let isComputing = false;\n    let memoizedValue;\n    const breedFactory = () => {\n      if (!tools.isHatched)\n        throw new Error('breeds object cannot be used until eggs hatch');\n\n      if (isComputed) return memoizedValue;\n      if (isComputing)\n        throw new Error(\n          `breed cycle detected, it uses breeds that uses \"${name}\"`\n        );\n\n      isComputing = true;\n      memoizedValue = factory(localBreeds);\n\n      isComputed = true;\n      return memoizedValue;\n    };\n\n    factories[name] = breedFactory;\n\n    defineProperty(breeds, name, {\n      get: breedFactory,\n      configurable: true\n    });\n  }\n\n  tool('breed', breed);\n  tool('breeds', frozenBreeds);\n};\n","export default function newTools() {\n  const tools = Object.create(null);\n\n  tools.tool = (name, value) => {\n    if (!name || typeof name !== 'string')\n      throw new Error(\n        `invalid tool name, expected the first argument to be a non-empty string but received \"${name}\"`\n      );\n\n    if (tools.isHatched)\n      throw new Error(\n        `invalid state exception, cannot define more tools once the egg is hatched`\n      );\n\n    tools[name] = value;\n  };\n\n  tools.isHatched = false;\n\n  const frozenTools = Object.freeze(Object.create(tools));\n  return frozenTools;\n}\n","function normalizeEggs(...eggs) {\n  const eggsSet = new Set();\n\n  function addEggs(nextEggs) {\n    for (let i = 0; i < nextEggs.length; i++)\n      if (Array.isArray(nextEggs[i])) addEggs(nextEggs[i]);\n      else eggsSet.add(nextEggs[i]);\n  }\n\n  addEggs(eggs);\n\n  return [...eggsSet];\n}\n\nexport default normalizeEggs;\n","import breedEgg from './breedEgg';\nimport newTools from './newTools';\nimport normalizeEggs from './normalizeEggs';\n\nfunction validateEggs(eggs) {\n  for (let i = 0; i < eggs.length; i++)\n    if (typeof eggs[i] !== 'function')\n      throw new Error(\n        `received egg is not an egg, expected a function but received \"${eggs[i]}\"`\n      );\n}\n\nfunction hatchEggs(eggs, tools) {\n  for (let i = 0; i < eggs.length; i++) eggs[i](tools);\n}\n\nexport default function hatch(...eggs) {\n  const tools = newTools();\n  const uniqueEggs = normalizeEggs(breedEgg, eggs);\n\n  validateEggs(uniqueEggs);\n  hatchEggs(uniqueEggs, tools);\n\n  const breeds = tools.breeds;\n  tools.tool('isHatched', true);\n\n  return breeds;\n}\n"],"names":["defineProperty","Object","tools","tool","breeds","create","frozenBreeds","freeze","factories","name","factory","isHatched","Error","validateBreedContext","validateBreedName","validateBreedFactory","uberFactory","localBreeds","get","memoizedValue","isComputed","isComputing","breedFactory","configurable","newTools","value","normalizeEggs","eggsSet","Set","addEggs","nextEggs","i","length","Array","isArray","add","eggs","validateEggs","hatchEggs","uniqueEggs","breedEgg"],"mappings":"sMAAQA,EAAmBC,OAAnBD,0BAEOE,OACLC,EAASD,EAATC,KAEFC,EAASH,OAAOI,OAAO,MACvBC,EAAeL,OAAOM,OAAON,OAAOI,OAAOD,IAC3CI,EAAYP,OAAOI,OAAO,MA2DhCF,EAAK,SAtCL,SAAeM,EAAMC,kBAlBfR,EAAMS,UACR,MAAM,IAAIC,MAAM,uDAkBlBC,YAfyBJ,OACpBA,GAAwB,iBAATA,EAClB,MAAM,IAAIG,gGACkFH,OAa9FK,CAAkBL,YATUC,MACL,mBAAZA,EACT,MAAM,IAAIE,6FAC+EF,OAO3FK,CAAqBL,OAEfM,EAAcR,EAAUC,GACxBQ,EAAchB,OAAOI,OAAOD,GAClCJ,EAAeiB,EAAaR,EAAM,CAAES,IAAKF,IACzCf,OAAOM,OAAOU,OAIVE,EAFAC,GAAa,EACbC,GAAc,EAEZC,EAAe,eACdpB,EAAMS,UACT,MAAM,IAAIC,MAAM,oDAEdQ,EAAY,OAAOD,KACnBE,EACF,MAAM,IAAIT,yDAC2CH,cAGvDY,GAAc,EACdF,EAAgBT,EAAQO,GAExBG,GAAa,EACND,GAGTX,EAAUC,GAAQa,EAElBtB,EAAeI,EAAQK,EAAM,CAC3BS,IAAKI,EACLC,cAAc,OAKlBpB,EAAK,SAAUG,ICnEF,SAASkB,QAChBtB,EAAQD,OAAOI,OAAO,aAE5BH,EAAMC,KAAO,SAACM,EAAMgB,OACbhB,GAAwB,iBAATA,EAClB,MAAM,IAAIG,+FACiFH,UAGzFP,EAAMS,UACR,MAAM,IAAIC,mFAIZV,EAAMO,GAAQgB,GAGhBvB,EAAMS,WAAY,EAEEV,OAAOM,OAAON,OAAOI,OAAOH,ICnBlD,SAASwB,QACDC,EAAU,IAAIC,aAEXC,EAAQC,OACV,IAAIC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAC/BE,MAAMC,QAAQJ,EAASC,IAAKF,EAAQC,EAASC,IAC5CJ,EAAQQ,IAAIL,EAASC,+BANNK,2BAAAA,yBASxBP,EAAQO,aAEGT,GCPb,SAASU,EAAaD,OACf,IAAIL,EAAI,EAAGA,EAAIK,EAAKJ,OAAQD,OACR,mBAAZK,EAAKL,GACd,MAAM,IAAInB,uEACyDwB,EAAKL,QAI9E,SAASO,EAAUF,EAAMlC,OAClB,IAAI6B,EAAI,EAAGA,EAAIK,EAAKJ,OAAQD,IAAKK,EAAKL,GAAG7B,UAGjC,mBACPA,EAAQsB,uBADiBY,2BAAAA,sBAEzBG,EAAab,EAAcc,EAAUJ,GAE3CC,EAAaE,GACbD,EAAUC,EAAYrC,OAEhBE,EAASF,EAAME,cACrBF,EAAMC,KAAK,aAAa,GAEjBC"}