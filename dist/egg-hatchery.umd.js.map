{"version":3,"file":"egg-hatchery.umd.js","sources":["../src/newBreedEgg.js","../src/newTools.js","../src/normalizeEggs.js","../src/index.js"],"sourcesContent":["const { defineProperty } = Object;\n\nexport default () => {\n  let publicBreeds;\n  const breedEgg = (tools) => {\n    const { tool } = tools;\n\n    const breeds = Object.create(null);\n    const frozenBreeds = Object.freeze(Object.create(breeds));\n    const factories = Object.create(null);\n\n    function validateBreedContext() {\n      if (tools.isHatched())\n        throw new Error('breed a hatching breed fails when hatch is finished');\n    }\n\n    function validateBreedName(name) {\n      if (!name || typeof name !== 'string')\n        throw new Error(\n          `invalid breed name, expected the first argument to be a non-empty string but received \"${name}\"`\n        );\n    }\n\n    function validateBreedFactory(factory) {\n      if (typeof factory !== 'function')\n        throw new Error(\n          `invalid breed function, expected the second argument to be a function but received \"${factory}\"`\n        );\n    }\n\n    function breed(name, factory) {\n      validateBreedContext();\n      validateBreedName(name);\n      validateBreedFactory(factory);\n\n      const uberFactory = factories[name];\n      const breedFactory = () => {\n        if (!tools.isHatched())\n          throw new Error('breeds object cannot be used until eggs hatch');\n\n        defineProperty(breeds, name, { get: uberFactory, configurable: true });\n        const value = factory(frozenBreeds);\n        defineProperty(breeds, name, { value, configurable: true });\n\n        return value;\n      };\n\n      factories[name] = breedFactory;\n\n      defineProperty(breeds, name, {\n        get: breedFactory,\n        configurable: true,\n      });\n    }\n\n    tool('breed', breed);\n    publicBreeds = frozenBreeds;\n  };\n\n  const getBreeds = () => publicBreeds;\n  return [breedEgg, getBreeds];\n};\n","export default function newTools() {\n  const tools = Object.create(null);\n  let isHatched = false;\n\n  const checkIsHatched = () => {\n    if (isHatched)\n      throw new Error(\n        `invalid state exception, cannot use tools once the egg is hatched`\n      );\n  };\n\n  tools.tool = (name, value) => {\n    if (!name || typeof name !== 'string')\n      throw new Error(\n        `invalid tool name, expected the first argument to be a non-empty string but received \"${name}\"`\n      );\n\n    checkIsHatched();\n\n    if (typeof value === 'function') {\n      const fn = value;\n      value = (...args) => {\n        checkIsHatched();\n        fn(...args);\n      };\n    }\n\n    tools[name] = value;\n  };\n\n  tools.isHatched = () => isHatched;\n  const hatched = () => (isHatched = true);\n\n  const frozenTools = Object.freeze(Object.create(tools));\n  return [frozenTools, hatched];\n}\n","function normalizeEggs(...eggs) {\n  const eggsSet = new Set();\n\n  function addEggs(nextEggs) {\n    for (let i = 0; i < nextEggs.length; i++)\n      if (Array.isArray(nextEggs[i])) addEggs(nextEggs[i]);\n      else eggsSet.add(nextEggs[i]);\n  }\n\n  addEggs(eggs);\n\n  return [...eggsSet];\n}\n\nexport default normalizeEggs;\n","import newBreedEgg from './newBreedEgg';\nimport newTools from './newTools';\nimport normalizeEggs from './normalizeEggs';\n\nfunction validateEggs(eggs) {\n  for (let i = 0; i < eggs.length; i++)\n    if (typeof eggs[i] !== 'function')\n      throw new Error(\n        `received egg is not an egg, expected a function but received \"${eggs[i]}\"`\n      );\n}\n\nfunction hatchEggs(eggs, tools) {\n  for (let i = 0; i < eggs.length; i++) eggs[i](tools);\n}\n\nexport default function hatch(...eggs) {\n  const [tools, hatched] = newTools();\n  const [breedEgg, getBreeds] = newBreedEgg();\n  const uniqueEggs = normalizeEggs(breedEgg, eggs);\n\n  validateEggs(uniqueEggs);\n  hatchEggs(uniqueEggs, tools);\n\n  const breeds = getBreeds();\n  hatched();\n\n  return breeds;\n}\n"],"names":["defineProperty","Object","publicBreeds","getBreeds","breedEgg","tools","tool","breeds","create","frozenBreeds","freeze","factories","validateBreedContext","isHatched","Error","validateBreedName","name","validateBreedFactory","factory","uberFactory","breedFactory","get","configurable","value","newTools","checkIsHatched","fn","frozenTools","hatched","normalizeEggs","eggsSet","Set","addEggs","nextEggs","i","length","Array","isArray","add","eggs","validateEggs","hatchEggs","hatch","newBreedEgg","uniqueEggs"],"mappings":"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"}